The following gives a description of each aspect of the project from which I had to write the SQL code for.

LOGIN - checks if the given username and password combination is in the database, and checks if the user is a customer or a manager.

NEW USER REGISTRATION - Checks if the username is taken. Inserts new login into the database.

ADD SCHOOL INFO - Updates the boolean flag to show that the new customer if a student if the email ends in '.edu'

VIEW TRAIN SCHEDULE - Gets information for all the routes that a user inputted train numbmer takes.

SEARCH TRAIN/SELECT DEPARTURE - Outputs the train number and the departure route based on the customer's preferred departure location, arrival location, and departure date.

TRAVEL EXTRAS AND PASSENGER INFO - Saves the number of bags a customer will take.

MAKE RESERVATION - If it is the user's first ticket, a new reservation is created for the customer. Also outputs the train number, time (duration), departs from, arrives from, class, price, number of bags, and passenger name all in the reservation. The total cost is then calculated and a reservation can be deleted if the user chooses to. If the user accepts the reservation, the new reservation with a given ID is created and stored in the database.

UPDATE RESERVATION - Given the user's reservation ID, a customer can view their reservation of train tickets where they can select a ticket to update with a new depature date, and the new total cost is calculated.

CANCEL RESERVATION - A customer can cancel a reservation and the amount to be refunded is calculated as follows: 80% of the original total cost will be refunded if the customer cancelled the reservation more than 7 days earlier than the earliest departure date, 50% of the original total cost will be refunded if the customer cancelled the reservation more than 1 day but less than 7 days earlier than the earliest departure date. A $50 cancellation fee will be deducted from the refund.

GIVE/VIEW REVIEWS - A customer can choose to either view train reviews or give one themselves.

VIEW REVENUE REPORT - This report shows the total revenue of each month (only shows the previous three months).

VIEW POPULAR TRAIN ROUTES - This report shows top 3 most popular train (calculated by number of reservations) of each month.

CREATE TABLE User (
    Username VARCHAR(20) PRIMARY KEY,
    Password VARCHAR(20) NOT NULL,
    Unique(Password)
);

/* Manager Table */
CREATE TABLE Manager (
    Username VARCHAR(20) PRIMARY KEY,
    FOREIGN KEY(Username) REFERENCES User(Username)
);

/* Customer Table */
CREATE TABLE Customer (
    Username VARCHAR(20) PRIMARY KEY REFERENCES User(Username),
    EmailAddress VARCHAR(50) NOT NULL,
    IsStudent INT(1) DEFAULT 0,
    UNIQUE(EmailAddress)
);

/* Card Table */
CREATE TABLE Card (
    CardNumber BIGINT(16) PRIMARY KEY,
    CVV INT(3) NOT NULL,
    Name VARCHAR(100) NOT NULL,
    ExpirationDate VARCHAR(7) NOT NULL,
    Username VARCHAR(20) NOT NULL,
	FOREIGN KEY(Username) REFERENCES Customer(Username)
);

/* Reservation Table */
CREATE TABLE Reservation (
    ReservationID INT(5) AUTO_INCREMENT PRIMARY KEY,
    NumUpdates INT(11) DEFAULT 0,
    CancellationDate DATE DEFAULT NULL,
    IsCancelled INT(1) DEFAULT 0,
    Username VARCHAR(20) NOT NULL,
    CardNumber BIGINT(16),
    FOREIGN KEY(Username) REFERENCES Customer(Username),
    FOREIGN KEY(CardNumber) REFERENCES Card(CardNumber)
);

/* Train Table */
CREATE TABLE Train (
    TrainNumber VARCHAR(50) PRIMARY KEY,
	1stClassPrice FLOAT(5,2),
    2ndClassPrice FLOAT(5,2)
);

/* Review Table */
CREATE TABLE Review (
	ReviewNum INT(5) AUTO_INCREMENT,
	Username VARCHAR(20),
	Rating VARCHAR(20) NOT NULL,
	Comment VARCHAR(250),
	TrainNumber VARCHAR(50) NOT NULL,
	PRIMARY KEY(ReviewNum,Username),
	FOREIGN KEY(TrainNumber) REFERENCES Train(TrainNumber),
	FOREIGN KEY (Username) REFERENCES Customer(Username)
);

/* Station Table */
CREATE TABLE Station (
    Location VARCHAR (50),
    StationName VARCHAR(50),
    PRIMARY KEY (Location, StationName)
);

/* Route Table */
CREATE TABLE Route (
    RouteNum INT (5) AUTO_INCREMENT,
	Location VARCHAR (50),
    StationName VARCHAR(50),
    ArrivalTime TIME,
    DepartureTime TIME,
    PRIMARY KEY (RouteNum),
    FOREIGN KEY (Location, StationName) REFERENCES Station(Location,StationName)
);

/* Takes Table */
CREATE TABLE Takes (
    RouteNum INT(5),
    TrainNumber VARCHAR(50),
    PRIMARY KEY (RouteNum, TrainNumber),
    FOREIGN KEY (RouteNum) REFERENCES Route(RouteNum),
    FOREIGN KEY(TrainNumber) REFERENCES Train(TrainNumber)
);

/* Ticket Table */
CREATE TABLE Ticket (
    TicketID INT(5) AUTO_INCREMENT,
    ReservationID INT(5),
    NumBags INT(1) NOT NULL,
    DepartureDate DATE NOT NULL,
    PassengerName VARCHAR(20) NOT NULL,
    ArrivalRouteNum INT(5) NOT NULL,
	DepartureRouteNum INT(5) NOT NULL,
    Class VARCHAR(10),
    Price FLOAT(6,2),
    PRIMARY KEY (TicketID),
    FOREIGN KEY (ArrivalRouteNum) REFERENCES Route(RouteNum),
    FOREIGN KEY (DepartureRouteNum) REFERENCES Route(RouteNum),
    FOREIGN KEY (ReservationID) REFERENCES Reservation(ReservationID)
);

/* System Table */
CREATE TABLE System (
    MaxBags INT(1),
    FreeBags INT(1),
    SDiscount FLOAT(3,2),
    ChargeFee FLOAT(5,2),
    PRIMARY KEY (MaxBags)
);
